#!/usr/bin/env ruby
#/ Usage: spec-changed
#/ Infer a list of specs to run based upon changed files and run them.
#/
require "optparse"
require "find"

loose_match = false
against_origin_master = false

ARGV.options do |opts|
  opts.banner = "#{`grep ^#/<'#{__FILE__}'|cut -c4-`}Options:\n"
  opts.on("-l", "--loose", "Loosely match specs with modified file base names") do
    loose_match = true
  end
  opts.on("-m", "--master", "Include files that differ to `origin/master`") do
    against_origin_master = true
  end
  opts.on_tail("-h", "--help", "Show help") {
    puts opts
    exit
  }
  opts.parse!
end

def loosely_matching_specs(file)
  base = File.basename(file).gsub(".rb", "")

  [].tap do |result|
    Find.find("spec") do |path|
      result << path if !File.directory?(path) && path.include?(base) && path.match?(/_spec\.rb$/)
    end
  end
end

def matching_specs(file)
  [
    file.gsub(/app\/|lib\//, "spec/").gsub(/\.rb$/, "_spec.rb"),
    file.gsub(/(app\/|lib\/)\/.+\//, "spec/").gsub(/\.rb$/, "_spec.rb"),
  ].select { |f| File.exist?(f) }
end


candidates = `git ls-files -m`.split.tap do |files|
  if against_origin_master
    files.concat(
      `git diff-tree -r --no-commit-id --name-only head origin/master`.split
    )
  end
end

files_to_test = candidates.flat_map do |changed_file|
  return changed_file if /_spec.rb$/.match?(changed_file)

  matching_specs(changed_file).tap do |result|
    result.concat(loosely_matching_specs(changed_file)) if loose_match
  end
end.uniq.compact

if files_to_test.empty?
  puts "No files to test"
  exit
end

command = "bundle exec rspec #{files_to_test.join(" ")}"
puts command
exec command
