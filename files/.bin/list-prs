#!/usr/bin/env ruby
# -*- coding: utf-8 -*-
#/ Usage: list-prs [options]
#/ List PRs that I haven't reviewed.
#/
#/    -r org/repo                      Limit query to a specific org/repo.
#/    -U user                          Query for a specific user.
#/    -a                               Show all open PRs.
#/    -u                               Only show PRs I haven't approved.
#/    -h, --help                       Show help.

$stderr.sync = true

require "optparse"
require "json"
require "date"
require "net/http"
require "uri"

TOKEN = `git config github.oauth-token`.strip
user = "grassdog"

repos = %w[
  envato/identity
  envato/identity-admin
  envato/identity-chatbot
  envato/identity-infrastructure
  envato/sso-server
  envato/sso-client
  envato/sso-js
  envato/sso-embedded
  envato/sso-reference-implementation
  envato/area51-server
  envato/area51-client
  envato/doclocker
]


filter = Proc.new { |pr|
  pr.unreviewed_by?(user)
}

ARGV.options do |opts|
  opts.on("-r", "--repo=val", String) { |val| repos = Array(val) }
  opts.on("-U", "--user=val", String) { |val| user = val }
  opts.on("-A", "--all", String) {
    filter = Proc.new { |pr| true }
  }
  opts.on("-u", "--unapproved", String) {
    filter = Proc.new { |pr| pr.unapproved_by?(user) }
  }
  opts.on_tail("-h", "--help") { exec "grep ^#/<'#{__FILE__}'|cut -c4-" }
  opts.parse!
end

class GithubGateway
  class PullRequest
    attr_reader :repo, :owner, :title, :url, :reviews, :labels

    def initialize(repo, pr_hash)
      @repo = repo
      @owner = pr_hash["author"]["login"]
      @updated_at = DateTime.parse(pr_hash["updatedAt"])
      @title = pr_hash["title"]
      @url = pr_hash["url"]
      @labels = pr_hash["labels"]["nodes"].map { |label| label["name"].downcase }
      @reviews = pr_hash["reviews"]["nodes"].map do |review_hash|
        OpenStruct.new(
          user: review_hash["author"]["login"],
          state: review_hash["state"]
        )
      end
    end

    def wip?
      labels.include?("wip")
    end

    def owned_by?(user)
      owner == user
    end

    def approvals
      reviews.select { |r| r.state == "APPROVED" }
    end

    def unreviewed?
      reviews.empty?
    end

    def unapproved?
      approvals.empty?
    end

    def unreviewed_by?(user)
      !owned_by?(user) && reviews.none? { |r| r.user == user }
    end

    def unapproved_by?(user)
      !owned_by?(user) && approvals.none? { |r| r.user == user }
    end

    def last_updated
      days_since = (DateTime.now.new_offset(0) - @updated_at).to_i
      days_since < 2 ? "in the last day" : "#{days_since} days ago"
    end

    def label_summary
      return "None" if labels.empty?

      labels.map {|label| "`#{label}`" } .join(", ")
    end
    def review_summary
      return "None" if reviews.empty?

      [].tap { |result|
        result << "âœ… x #{approvals.count}" unless approvals.empty?
        result << "ðŸ‘€ x #{reviews.count}" unless reviews.empty?
      }.join(", ")
    end
  end

  GITHUB_API_URL = "https://api.github.com/graphql"

  def initialize(repos, token)
    @repos = repos
    @token = token
  end

  def pull_requests(ignore_wip=false)
    response = JSON.load(post(GITHUB_API_URL, request_body(repos)).body)

    response["data"].values.flat_map do |repo|
      repo["pullRequests"]["nodes"].map do |pr|
        PullRequest.new(repo["name"], pr)
      end
    end.select do |pr|
      ignore_wip || !pr.wip?
    end
  end

  private

  attr_reader :org, :repos, :token

  def post(url, data)
    uri = URI.parse(url)

    http = build_http(uri)
    request = Net::HTTP::Post.new(
      uri.request_uri,
      "Content-Type" => "application/json",
      "Authorization" => "bearer #{token}"
    )
    request.body = JSON.dump(data)

    http.request(request)
  end

  def build_http(uri, options = {})
    Net::HTTP.new(uri.host, uri.port).tap do |http|
      http.read_timeout = options.fetch(:timeout, 8)
      http.open_timeout = 8
      http.use_ssl = (uri.scheme == 'https')
    end
  end

  def request_body(repos)
    {
      query: query(repos),
    }
  end

  def query(repos)
    "query {\n" +
      repos.map.with_index {|repo, i| repo_query(repo, i) }.join("\n") +
    "}"
  end

  def repo_query(repo, index)
    org, repo = repo.split("/")

    <<~EOF
    repo#{index}: repository(owner: "#{org}", name: "#{repo}") {
      name
      pullRequests(first: 50, states: OPEN) {
        nodes {
          title
          url
          updatedAt
          author {
            login
          }
          labels(first: 10) {
            nodes {
              name
            }
          }
          reviews(first: 50) {
            nodes {
              state
              author {
                login
              }
            }
          }
        }
      }
    }
    EOF
  end
end

def print_prs(prs)
  max_repo_length = prs.map(&:repo).map(&:length).max
  max_title_length = [prs.map(&:title).map(&:length).max, 50].min
  prs.each do |pr|
    $stdout.puts "\e[32m%-#{max_repo_length}s\e[0m  \e[33m%-#{max_title_length}s\e[0m  #{pr.url}" % [pr.repo, pr.title.slice(0, max_title_length)]
    $stdout.puts "%-#{max_repo_length}s   \e[34m#{pr.review_summary} Â· Last Updated #{pr.last_updated}\e[0m" % ""
    $stdout.puts ""
  end
end

prs = GithubGateway.new(repos, TOKEN).pull_requests

print_prs(prs.select(&filter))
