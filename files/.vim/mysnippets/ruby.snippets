snippet pry "require pry"
require 'pry'; binding.pry
endsnippet

snippet rpry "remote pry"
binding.remote_pry
endsnippet

snippet rhelp "require rspec helper"
require "spec_helper"
endsnippet

snippet ### "banner comment"
#
# $0
#
endsnippet

priority -50

snippet "^#!" "#!/usr/bin/env ruby" r
#!/usr/bin/env ruby
$0
endsnippet

snippet "^# ?[uU][tT][fF]-?8" "# encoding: UTF-8" r
# encoding: UTF-8
$0
endsnippet

snippet "\b(de)?f" "def <name>..." r
def ${1:function_name}${2:(${3:*args})}
	$0
end
endsnippet

snippet defi "def initialize ..."
def initialize${1:(${2:*args})}
	$0
end
endsnippet

snippet "(\S+)\.Merge!" ".merge!(<other_hash>) { |<key>,<oldval>,<newval>| <block> }" r
`!p snip.rv=match.group(1)`.merge!(${1:other_hash}) { |${2:key},${3:oldval},${4:newval}| ${5:block} }
endsnippet

snippet "(\S+)\.merge!" ".merge!(<other_hash>) do |<key>,<oldval>,<newval>| <block> end" r
`!p snip.rv=match.group(1)`.merge!(${1:other_hash}) do |${2:key},${3:oldval},${4:newval}|
	${0:block}
end
endsnippet

snippet "(\S+)\.Reject" ".reject { |<key>,<value>| <block> }" r
`!p snip.rv=match.group(1)`.reject { |${1:key},${2:value}| $0 }
endsnippet

snippet "(\S+)\.reject" ".reject do <key>,<value>| <block> end" r
`!p snip.rv=match.group(1)`.reject do |${1:key},${2:value}|
	$0
end
endsnippet

snippet "(\S+)\.Select" ".select { |<item>| <block>}" r
`!p snip.rv=match.group(1)`.select { |${1:item}| ${2:block} }
endsnippet

snippet "(\S+)\.select" ".select do |<item>| <block> end" r
`!p snip.rv=match.group(1)`.select do |${1:item}|
	${0:block}
end
endsnippet

snippet "(\S+)\.Sort" ".sort { |<a>,<b>| <block> }" r
`!p snip.rv=match.group(1)`.sort { |${1:a},${2:b}| $0 }
endsnippet

snippet "(\S+)\.sort" ".sort do |<a>,<b>| <block> end" r
`!p snip.rv=match.group(1)`.sort do |${1:a},${2:b}|
	$0
end
endsnippet

snippet "(\S+)\.ea" "<elements>.each do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.each { |${1:e}| $0 }
endsnippet

snippet "(\S+)\.ead" "<elements>.each do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.each do |${1:e}|
	$0
end
endsnippet

snippet "(\S+)\.Map" ".map { |<element>| <block> }" r
`!p snip.rv=match.group(1)`.map { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}| $0 }
endsnippet

snippet "(\S+)\.map" ".map do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.map do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}|
	$0
end
endsnippet

snippet "(\S+)\.Each" ".each { |<element>| <block> }" r
`!p snip.rv=match.group(1)`.each { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}| $0 }
endsnippet

snippet "(\S+)\.each" ".each do |<element>| <block> end" r
`!p snip.rv=match.group(1)`.each do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`}|
	$0
end
endsnippet

snippet "(\S+)\.Each_?w(ith)?_?i(ndex)?" ".each_with_index { |<element>,<i>| <block> }" r
`!p snip.rv=match.group(1)`.each_with_index { |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`},${2:i}| $0 }
endsnippet

snippet "(\S+)\.each_?w(ith)?_?i(ndex)?" ".each_with_index do |<element>,<i>| <block> end" r
`!p snip.rv=match.group(1)`.each_with_index do |${1:`!p
element_name = match.group(1).lstrip('$@')
ematch = re.search("([A-Za-z][A-Za-z0-9_]+?)s?[^A-Za-z0-9_]*?$", element_name)
try:
	wmatch = re.search("([A-Za-z][A-Za-z0-9_]+)$", ematch.group(1))
	snip.rv = wmatch.group(1).lower()
except:
	snip.rv = 'element'
`},${2:i}|
	$0
end
endsnippet

snippet "(\S+)\.gsub" ".gsub(<expression>) { <block> }" r
`!p snip.rv=match.group(1)`.gsub(${1:expression}) { ${2:"replace_with"} }
endsnippet

snippet do "do |<key>| ... end" i
do |${1:args}|
	$0
end
endsnippet

snippet Do "do ... end" i
do
	$0
end
endsnippet

snippet until "until <expression> ... end"
until ${1:expression}
	$0
end
endsnippet

snippet Until "begin ... end until <expression>"
begin
	$0
end until ${1:expression}
endsnippet

snippet while "while <expression> ... end"
while ${1:expression}
	$0
end
endsnippet

snippet While "begin ... end while <expression>"
begin
	$0
end while ${1:expression}
endsnippet

snippet "\b(r|attr)" "attr_reader :<attr_names>" r
attr_reader :${0:attr_names}
endsnippet

snippet "\b(w|attr)" "attr_writer :<attr_names>" r
attr_writer :${0:attr_names}
endsnippet

snippet "\b(rw|attr)" "attr_accessor :<attr_names>" r
attr_accessor :${0:attr_names}
endsnippet

snippet begin "begin ... rescue ... end"
begin
	$1
rescue
	$0
end
endsnippet

snippet begin "begin ... rescue ... else ... ensure ... end"
begin
	${1:# Raise exception}
rescue Exception => e
	puts e.message
	puts e.backtrace.inspect
	${2:# Rescue}
else
	${3:# other exception}
ensure
	${0:# always excute}
end
endsnippet

snippet rescue
rescue Exception => e
	puts e.message
	puts e.backtrace.inspect
	${0:# Rescue}
endsnippet

snippet "\b(case|sw(itch)?)" "case <variable> when <expression> ... end" r
case ${1:variable}
when ${2:expression}
$0
end
endsnippet

snippet alias "alias :<new_name> :<old_name>"
alias :${1:new_name} :${2:old_name}
endsnippet

snippet class "class <class_name> def initialize ... end end"
class ${1:class_name}
	def initialize(${2:*args})
		$0
	end
end
endsnippet

snippet module "module"
module ${1:module_name}
	$0
end
endsnippet

snippet =beg
=begin
	$0
=end
endsnippet
